package testowanieMoje;

public class TekstZadanZLoadClass {

	public TekstZadanZLoadClass(){}
	
	protected String ustalonyKod(){
		StringBuilder kod = new StringBuilder("package zadanie;"
				+ "\n"	
				+ "\n	import java.io.DataInputStream;"
				+ "\n	import java.io.File;"
				+ "\n	import java.io.FileInputStream;"
				+ "\n	import java.io.IOException;"
				+ "\n"	
				+ "\npublic class Zadanie extends ClassLoader{"
				+ "\n"
				+ "\n\tpublic Zadanie(){}"
				+ "\n"
				+ "\n\tpublic int zadanie(int[] A){"
				+ "\n"
				+ "\t\tSystem.out.println(\"poszlo... 1\");\n"
				+ "\n\treturn 12;"
				+ "\n\t}\n"
				+ "\n@Override"
				+ "\n	public Class<?> loadClass(String s) { "
				+ "\n	System.out.println(\"----- metoda loadClass()-----\");"
				+ "\n	return findClass(s); "
				+ "\n	} "
				+ "\n	@Override "
				+ "\n	public Class<?> findClass(String s) { "
				+ "\n		try { "
				+ "\n			byte[] bytes = loadClassData(s); "
				+ "\n			return defineClass(s, bytes, 0, bytes.length); "
				+ "\n		} catch (IOException ioe) { "
				+ "\n			try { "
				+ "\n				return super.loadClass(s); "
				+ "\n			} catch (ClassNotFoundException ignore) { } "
				+ "\n			ioe.printStackTrace(System.out); "
				+ "\n			return null; "
				+ "\n		} "
				+ "\n	} "
				+ "\n\n		private byte[] loadClassData(String className) throws IOException { "
				+ "\n	File f = new File(\"D:/workE/Kodilitek/target/classes/zadanie.\"+className); "
				+ "\n	int size = (int) f.length(); "
				+ "\n	byte buff[] = new byte[size]; "
				+ "\n	FileInputStream fis = new FileInputStream(f); "
				+ "\n	DataInputStream dis = new DataInputStream(fis); "
				+ "\n	dis.readFully(buff); "
				+ "\n	dis.close(); "
				+ "\n	return buff; "
				+ "\n	}"
				+ "\n}"
				);
				return kod.toString();
	}
	
	protected String ustalonyKod1(){
		StringBuilder kod = new StringBuilder("package zadanie;"
				+ "\n"
				+ "\n	import java.io.DataInputStream;"
				+ "\n	import java.io.File;"
				+ "\n	import java.io.FileInputStream;"
				+ "\n	import java.io.IOException;"
				+ "\n"
				+ "\npublic class Zadanie extends ClassLoader{"
				+ "\n"
				+ "\n\tpublic Zadanie(){}"
				+ "\n"
				+ "\n\tpublic int zadanie(int[] A){"
				+ "\n"
				+ "\t\tSystem.out.println(\"poszlo... 2\");\n"
				+ "\n\treturn 4;"
				+ "\n\t}\n"

				+ "\n@Override"
				+ "\n	public Class<?> loadClass(String s) { "
				+ "\n	System.out.println(\"===== metoda loadClass() =====\");"
				+ "\n	return findClass(s); "
				+ "\n	} "
				+ "\n	@Override "
				+ "\n	public Class<?> findClass(String s) { "
				+ "\n		try { "
				+ "\n			byte[] bytes = loadClassData(s); "
				+ "\n			return defineClass(s, bytes, 0, bytes.length); "
				+ "\n		} catch (IOException ioe) { "
				+ "\n			try { "
				+ "\n				return super.loadClass(s); "
				+ "\n			} catch (ClassNotFoundException ignore) { } "
				+ "\n			ioe.printStackTrace(System.out); "
				+ "\n			return null; "
				+ "\n		} "
				+ "\n	} "
				+ "\n\n		private byte[] loadClassData(String className) throws IOException { "
				+ "\n	File f = new File(\"D:/workE/Kodilitek/target/classes/zadanie.\"+className); "
				+ "\n	int size = (int) f.length(); "
				+ "\n	byte buff[] = new byte[size]; "
				+ "\n	FileInputStream fis = new FileInputStream(f); "
				+ "\n	DataInputStream dis = new DataInputStream(fis); "
				+ "\n	dis.readFully(buff); "
				+ "\n	dis.close(); "
				+ "\n	return buff; "
				+ "\n	}"
				+ "\n}"
				);
		return kod.toString();
	}
}
